plot_trial <- function(i=NULL){
if(is.null(i)){
Y = t(apply(M,c(1,2),mean))
}else{
Y = t(M[,,i])
}
Y = apply(Y,2,diff)
matplot(Y, lty=1, type='l', col=1)
}
plot_trial <- function(i=NULL){
if(is.null(i)){
Y = t(apply(M,c(1,2),mean))
}else{
Y = t(M[,,i])
}
Y = apply(Y,2,diff)
matplot(Y, lty=1, type='l', col=1)
}
plot_trial(1)
plot_trial()
plot_trial(1)
plot_trial(2)
plot_trial(3)
plot_trial(3)
plot_trial(3)
# Hilbert transformation using Fourier transforms
hilbert <- function(inVec,n=length(inVec)){
#if(!exists("n")) n = length(inVec)
tmp = fft(inVec[1:n])
hVec = rep(0,n)
hVec[c(1,n/2+1)] = c(1,1)
hVec[2:(n/2)] = 2
outVec = fft(tmp*hVec,inverse=T)/n
return(outVec[1:n])
}
# Unwrap phases function
unwrapPhase <- function(Z){
X = Z[,seq(2,ncol(Z),2)] # Extract x-values
Y = Z[,seq(3,ncol(Z),2)] # Extract y-values
p = ncol(X) # no. of oscillators
N = nrow(Z) # no. of observations
phi = matrix(0,nr=N,nc=p)
for(i in 1:p){
phi[,i] = signal::unwrap((atan2(Y[,i],X[,i])+2*pi)%%(2*pi))
}
phi = data.frame(phi)
names(phi) = paste0("phi",1:p)
invisible(phi)
}
Y = t(apply(M,c(1,2),mean))
Y = apply(Y,2,diff)
matplot(Y, lty=1, type='l', col=1)
Y
dim(Y)
Y = t(apply(M,c(1,2),mean))
matplot(Y, lty=1, type='l', col=1)
hilbert(Y)
dim(Y)
hilbert(Y[,1])
plot(hilbert(Y[,1]))
for(i in 1:ncol(Y)){
Z[,i] = Re(Y[,i])
}
Z = Y
for(i in 1:ncol(Y)){
Z[,i] = Re(Y[,i])
}
plot(Z)
Z
dim(Z)
plot(Z[,1])
unwrapPhase <- function(Z){
X = Z[,seq(2,ncol(Z),2)] # Extract x-values
Y = Z[,seq(3,ncol(Z),2)] # Extract y-values
p = ncol(X) # no. of oscillators
N = nrow(Z) # no. of observations
phi = matrix(0,nr=N,nc=p)
for(i in 1:p){
phi[,i] = signal::unwrap((atan2(Y[,i],X[,i])+2*pi)%%(2*pi))
}
phi = data.frame(phi)
names(phi) = paste0("phi",1:p)
invisible(phi)
}
Y[,1]
hilber(Y[,1])
hilbert(Y[,1])
unwrapPhase
unwrapPhase(hilbert(Y[,1]))
Y[,i]
library(HiDimCI)
library(Matrix)
library(igraph)
library(misc)
misc::clean_up()
filelib = icloud_lib("GitHub/Source/R/packages/HiDimCI/")
library(matlab)
library(R.matlab)
res = R.matlab::readMat("~/Downloads/eeg.set")
M = res$EEG[[16]]
plot_trial <- function(i=NULL){
if(is.null(i)){
Y = t(apply(M,c(1,2),mean))
}else{
Y = t(M[,,i])
}
Y = apply(Y,2,diff)
matplot(Y, lty=1, type='l', col=1)
}
plot_trial(3)
Z = Y
Z
plot_trial <- function(i=NULL){
if(is.null(i)){
Y = t(apply(M,c(1,2),mean))
}else{
Y = t(M[,,i])
}
Y = apply(Y,2,diff)
matplot(Y, lty=1, type='l', col=1)
return(Y)
}
plot_trial(null)
plot_trial()
Y = plot_trial()
Y
dim(Y)
Z = Y
Y[,i]
Y[,1]
plot(Y[,1])
range(Y[,1])
hilbert(Y[,1])
# Hilbert transformation using Fourier transforms
hilbert <- function(inVec,n=length(inVec)){
#if(!exists("n")) n = length(inVec)
tmp = fft(inVec[1:n])
hVec = rep(0,n)
hVec[c(1,n/2+1)] = c(1,1)
hVec[2:(n/2)] = 2
outVec = fft(tmp*hVec,inverse=T)/n
return(outVec[1:n])
}
# Unwrap phases function
unwrapPhase <- function(Z){
X = Z[,seq(2,ncol(Z),2)] # Extract x-values
Y = Z[,seq(3,ncol(Z),2)] # Extract y-values
p = ncol(X) # no. of oscillators
N = nrow(Z) # no. of observations
phi = matrix(0,nr=N,nc=p)
for(i in 1:p){
phi[,i] = signal::unwrap((atan2(Y[,i],X[,i])+2*pi)%%(2*pi))
}
phi = data.frame(phi)
names(phi) = paste0("phi",1:p)
invisible(phi)
}
hilbert(Y[,1])
hilbert(Y[,1])
Z = plot_trial()
X = Z
for(i in 1:ncol(Z)){
Y[,i] = hilbert(Im(Z[,i]))
}
unwrapPhase()
unwrapPhase
unwrapPhase <- function(X,Y){
p = ncol(X) # no. of oscillators
N = nrow(X) # no. of observations
phi = matrix(0,nr=N,nc=p)
for(i in 1:p){
phi[,i] = signal::unwrap((atan2(Y[,i],X[,i])+2*pi)%%(2*pi))
}
phi = data.frame(phi)
names(phi) = paste0("phi",1:p)
invisible(phi)
}
unwrapPhase(X,Y)
p = ncol(X) # no. of oscillators
N = nrow(X) # no. of observations
p
N
phi = matrix(0,nr=N,nc=p)
for(i in 1:p){
phi[,i] = signal::unwrap((atan2(Y[,i],X[,i])+2*pi)%%(2*pi))
}
i=1
atan2(Y[,i],X[,i])
Y
Z
X = Z
for(i in 1:ncol(Z)){
Y[,i] = hilbert(Im(Z[,i]))
}
for(i in 1:ncol(Z)){
Y[,i] = hilbert(Im(Z[,i]))
}
Y
for(i in 1:ncol(Z)){
Y[,i] = Im(hilbert(Z[,i]))
}
Y
Im(hilbert(Z[,i]))
X = Z
for(i in 1:ncol(Z)){
Y[,i] = Im(hilbert(Z[,i]))
}
Y
Im(Y)
Re(Y)
Y=NULL
X = Z
for(i in 1:ncol(Z)){
Y[,i] = Im(hilbert(Z[,i]))
}
X = Y = Z
for(i in 1:ncol(Z)){
Y[,i] = Im(hilbert(Z[,i]))
}
Y
X = Y = Z
for(i in 1:ncol(Z)){
Y[,i] = Im(hilbert(Z[,i]))
}
Y
unwrapPhase(X,Y)
P
P = unwrapPhase(X,Y)
P
matplot(P, lty=1, type='l', col=1)
res$EEG
res
str(res)
res$EEG
res$EEG[[20]]
res$EEG[[25]]
res$EEG[[22]]
res$EEG
length(res$EEG[[22]])
length(res$EEG[[23]])
res$EEG[[23]]
res$EEG[[23]][,1]
length(res$EEG[[23]])
res$EEG[[23]][[1]]
res$EEG[[23]][[2]]
res$EEG[[23]][[1]]
res$EEG[[23]][1]
res$EEG[[23]][seq(1,640,10)]
unlist(res$EEG[[23]][seq(1,640,10)])
johansen(P, 40, Psi = TRUE)
johansen(P, 40, Psi = FALSE)
matplot(P, lty=1, type='l', col=1)
johansen(P, r=40, Psi = FALSE)
johansen(t(P), r=40, Psi = FALSE)
dim(johansen(t(P), r=40, Psi = FALSE))
vecm = johansen(t(P), r=40, Psi = FALSE)
vecm
dim(vecm$data)
vecm$alpha%*%t(vecm$beta)
vecm = johansen(t(P), r=40, Psi = TRUE)
vecm$alpha%*%t(vecm$beta)
plot_adj_matrix(vecm$alpha%*%t(vecm$beta))
vecm = johansen(t(P), r=40, Psi = TRUE)
plot_adj_matrix(vecm$alpha%*%t(vecm$beta))
Pi = vecm$alpha%*%t(vecm$beta)
Pi.sym = .5*(Pi+t(Pi))
plot_adj_matrix(Pi.sym)
cluster(Pi.sym)
max(cluster(Pi.sym)$mod)
cluster(Pi.sym)$grps
grp = cluster(Pi.sym)$grps
cls = cluster(Pi.sym)$grps
cls
channels = unlist(res$EEG[[23]][seq(1,640,10)])
channels
cls$idx
channels[cls$idx]
cls$channels = channels[cls$idx]
cls
dim(cls)
plot_adj_matrix(Pi.sym[cls$idx,cls$idx])
cls
P
names(P)
names(P) = channels
names(P)
P
P$Cz
P-P$Cz
matplot(P-P$Cz,type='l', lty=1, col=1)
P = P-P$Cz
matplot(P, lty=1, type='l', col=1)
vecm = johansen(t(P), r=40, Psi = TRUE)
P$Cz
which(names(P)=="Cz")
P[,-which(names(P)=="Cz")]
P = P[,-which(names(P)=="Cz")]
matplot(P, lty=1, type='l', col=1)
str(res)
res$EEG
# str(res)
# res$EEG
# length(res$EEG[[23]])
vecm = johansen(t(P), r=40, Psi = TRUE)
Pi = vecm$alpha%*%t(vecm$beta)
Pi.sym = .5*(Pi+t(Pi))
plot_adj_matrix(Pi.sym)
cls = cluster(Pi.sym)$grps
cls$channels = channels[cls$idx]
plot_adj_matrix(Pi.sym[cls$idx,cls$idx])
cls
names(P)
pi/2
library(HiDimCI)
library(misc)
library(Matrix)
library(doParallel)
library(igraph)
filelib = icloud_lib("GitHub/Source/R/packages/HiDimCI/")
# setwd(filelib)
clean_up(filelib)
set.seed(1234)
run_and_save <- function(N,p,d, scramble=FALSE){
# N       = 2000 # 500,1000,2000 or 5000
# p       = 50
# d       = 8
sig     = 1
mc_iter = 300
dt      = 1
# p-floor(p/d)*d    # This gives: p-floor(p/d)*d independent processes
B      = as.matrix(HiDimCI::Kuramoto.matrix(p,d))
Brank  = rankMatrix(B)[1]
X      = HiDimCI::sampleX(B,N,sig)
if(scramble){
scramble_idx    = sample(1:p)
unscramble_idx  = sort(scramble_idx, index.return=TRUE)$ix
X       = X[scramble_idx,]
# X       = X[unscramble_idx,]
filename  = paste0(filelib,"data/Bootstrap_N",N,"_p",p,"_d",d,"_scrambled.Rda")
} else{
scramble_idx    = 1:p
unscramble_idx    = 1:p
filename  = paste0(filelib,"data/Bootstrap_N",N,"_p",p,"_d",d,".Rda")
}
# if(!file.exists(filename)){
b.test = HiDimCI::bootstrap_parallel(X, mc_iter,1, verbose=TRUE, cls = detectCores())
b.test$scramble_idx = scramble_idx
b.test$X = X
b.test$B = B
save(b.test, file = filename)
# }else{
# load(filename)
# }
}
load_or_run <- function(N,d,p,scrambled){
if(scrambled){
fn  = paste0(filelib,"data/Bootstrap_N",N,"_p",p,"_d",d,"_scrambled.Rda")
} else {
fn  = paste0(filelib,"data/Bootstrap_N",N,"_p",p,"_d",d,".Rda")
}
if(file.exists(fn)){
load(fn,envir = .GlobalEnv)
} else{
run_and_save(N,p,d, scrambled)
load(fn, evir = .GlobalEnv)
}
}
load_or_run(N=2000, d=8, p=100, scrambled=TRUE)
# notify("Bootstrap test runs done!")
b.test$rank = rankTest(b.test)
b.test$rank$r
p = nrow(b.test$X)
B = b.test$B
Brank = rankMatrix(B)
X = b.test$X
r = Brank[1] #b.test$rank$r
r = b.test$rank$r
VECM_est = johansen(X,r)
par(bty='n')
boxplot(x=t(b.test$boot), col=add.alpha('dodgerblue',.75), border=add.alpha('black',.35), pch=16, cex=0.5, xaxt='n', outline=FALSE, range=0.95, lwd=2)
lines(1:p,b.test$test, lwd=2, col=add.alpha('red',.75), type='b', pch=16, cex=0.75)
abline(v=Brank+1, lwd=2, lty=3, col=add.alpha('black',.75))
axis(1, at=pretty(c(0,p))+1,labels = pretty(c(0,p)))
# Unrestricted estimator
P.hat = VECM_est$alpha%*%t(VECM_est$beta)
# Project estimated P.hat onto a symmetric subspace
P.prj = low_rank(sym_project(P.hat),r)
# Symmetric estimator of Pi
P.sym =  P.sym.hat(X,r)
test_matrix(P.hat,B)
test_matrix(P.prj,B)
test_matrix(P.sym,B)
idx = sort(b.test$scramble_idx, index.return=TRUE)$ix
idx = order(b.test$scramble_idx)
cls = cluster(P.sym)$grps
# How many are put in each group:
tbl = table(cls$cluster)
Z = matrix(NA, nr=max(cls$cluster), nc=max(tbl))
for(i in 1:nrow(Z)){
tmp = sort(cls$idx[cls$cluster==i])
Z[i,1:length(tmp)] = tmp
}
Z = Z[order(Z[,1]),] # order by first column
plot_adj_matrix(P.sym[cls$idx,cls$idx])
cluster
M = P.sym
tmp   = diag(M) # extract diagonal, unconnected processes should have approx. zero
p     = length(tmp)
r.idx = which(tmp > mean(tmp)+2*sd(tmp) | tmp < mean(tmp)-2*sd(tmp) ) # find outliers, i.e. entries approx zero
r.idx
plot(tmp)
which(tmp > mean(tmp)+3*sd(tmp) | tmp < mean(tmp)-3*sd(tmp) )
quantile(tmp)
tmp[c(14,43,75,77)]
quantile(tmp, probs = .99)
quantile(tmp, probs = .997)
quantile(tmp, probs = .99)
quantile(tmp, probs = .99) < tmp[c(14,43,75,77)]
quantile(tmp, probs = .99)
quantile(tmp, probs = .975) < tmp[c(14,43,75,77)]
which(tmp > mean(tmp)+3*sd(tmp) | tmp < mean(tmp)-3*sd(tmp) ) # find outliers, i.e. entries approx zero
sd(tmp)
3*sd(tmp)
mean(tmp)+3*sd(tmp)
mean(tmp)
median(tmp)
3*sd(tmp)
tmp)+3*sd(tmp)
mean(tmp)-3*sd(tmp)
mean(tmp)+3*sd(tmp)
tmp
order(tmp)
sort(tmp)
diff(sort(tmp))
plot(diff(sort(tmp)))
order(tmp)
sdi = numeric(length(tmp))
mi = numeric(length(tmp))
m = numeric(length(tmp))
m = numeric(length(tmp))
for(i in 1:length(tmp)){
m[i] = mean(tmp[-i])
}
plot(m)
cols = rep('black', length(tmp))
idx = c(14,43,75,77)
quantile(tmp, probs = .99)
quantile(tmp, probs = .975) < tmp[idx]
which(tmp > mean(tmp)+3*sd(tmp) | tmp < mean(tmp)-3*sd(tmp) ) # find outliers, i.e. entries approx zero
m = numeric(length(tmp))
for(i in 1:length(tmp)){
m[i] = mean(tmp[-i])
}
cols = rep('black', length(tmp))
plot(m, col=cols, pch=16)
cols[idx] = 'red'
cols
plot(m, col=cols, pch=16)
plot(diff(m), col=cols, pch=16)
plot(m, col=cols, pch=16)
m = lm(tmp~1)
summary(m)
sd(tmp)
dfbeta(m)
plt(dfbeta(m), col=cols, pch=16)
plot(dfbeta(m), col=cols, pch=16)
?dfbeta
m = numeric(length(tmp))
for(i in 1:length(tmp)){
m[i] = mean(tmp)-mean(tmp[-i])
}
cols = rep('black', length(tmp))
cols[idx] = 'red'
plot(m, col=cols, pch=16)
m = lm(tmp~1)
plot(dfbeta(m), col=cols, pch=16)
m = numeric(length(tmp))
for(i in 1:length(tmp)){
m[i] = mean(tmp)-mean(tmp[-i])
}
cols = rep('black', length(tmp))
cols[idx] = 'red'
plot(m, col=cols, pch=16)
sd(m)
sd(tmp)
3*sd(m)
abline(h=3*sd(m))
m > 3*sd(m) |  m < -3*sd(m)
which(m > 3*sd(m) |  m < -3*sd(m))
library(HiDimCI)
pnorm(.99)
pnorm(0)
pnorm(1.96)
pnorm(3)
pnorm(4)
plot(m, col=cols, pch=16)
# which(m > 3*sd(m) |  m < -3*sd(m))
abline(h=3*sd(m))
# which(m > 3*sd(m) |  m < -3*sd(m))
abline(h=4*sd(m))
abline(h=4*sd(m))
100*pnorm(4)
1e4*pnorm(4)
1e5*pnorm(4)
1e5*pnorm(3)
1e5-1e5*pnorm(3)
1e4-1e4*pnorm(3)
1e3-1e3*pnorm(3)
1e5*pnorm(4)
.3e5*pnorm(4)
3e4*pnorm(4)
3e4*pnorm(4)     # three of 100k

{
    "data" : [
        "\nR version 3.4.0 (2017-04-21) -- \"You Stupid Darkness\"\nCopyright (C) 2017 The R Foundation for Statistical Computing\nPlatform: x86_64-apple-darwin15.6.0 (64-bit)\n\nR is free software and comes with ABSOLUTELY NO WARRANTY.\nYou are welcome to redistribute it under certain conditions.\nType 'license()' or 'licence()' for distribution details.\n\n  Natural language support but running in an English locale\n\nR is a collaborative project with many contributors.\nType 'contributors()' for more information and\n'citation()' on how to cite R or R packages in publications.\n\n",
        "Type 'demo()' for some demos, 'help()' for on-line help, or\n'help.start()' for an HTML browser interface to help.\nType 'q()' to quit R.\n\n\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "> ",
        "eigenTest <- function(vals){",
        "+ ",
        "  ",
        "+ ",
        "  n = length(vals)",
        "+ ",
        "  ",
        "+ ",
        "  if(vals[1] > vals[n])",
        "+ ",
        "    vals = sort(vals,decreasing = FALSE)",
        "+ ",
        "  ",
        "+ ",
        "  test = cumsum(log(1-vals))",
        "+ ",
        "  ",
        "+ ",
        "  return(test)",
        "+ ",
        "}",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "> ",
        "# Various tools for High-Dimensional cointegration simulation",
        "> ",
        "",
        "> ",
        "# Find the moment matrices for Johansens eigenvalue problem.",
        "> ",
        "Sij <- function(Ri,Rj){",
        "+ ",
        "  N = ncol(Ri)+1",
        "+ ",
        "  Stmp = 0",
        "+ ",
        "  for(t in 1:(N-1)) Stmp = Stmp+Ri[,t]%*%t(Rj[,t])/N",
        "+ ",
        "  Stmp",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Get the eigenvalues of the combination of the moment matrices S00, S11, S01, S10",
        "> ",
        "Seigen <- function(X){",
        "+ ",
        "  dX = diff(t(X))",
        "+ ",
        "  X1 = t(X[,-N])",
        "+ ",
        "",
        "+ ",
        "  R0 = t(dX-apply(dX,2,sum)/N)",
        "+ ",
        "  R1 = t(X1-apply(X1,2,sum)/N)",
        "+ ",
        "",
        "+ ",
        "  S00 = Sij(R0,R0)",
        "+ ",
        "  S01 = Sij(R0,R1)",
        "+ ",
        "  S10 = Sij(R1,R0)",
        "+ ",
        "  S11 = Sij(R1,R1)",
        "+ ",
        "  e = sort(eigen(S01%*%solve(S11)%*%S10%*%solve(S00))$values,decreasing = FALSE)",
        "+ ",
        "  return(list(e=e,S00=S00,S01=S01,S11=S11))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "eigenTest <- function(vals){",
        "+ ",
        "",
        "+ ",
        "  n = length(vals)",
        "+ ",
        "",
        "+ ",
        "  if(vals[1] > vals[n])",
        "+ ",
        "    vals = sort(vals,decreasing = FALSE)",
        "+ ",
        "",
        "+ ",
        "  test = cumsum(log(1-vals))",
        "+ ",
        "",
        "+ ",
        "  return(test)",
        "+ ",
        "}",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "> ",
        "set.seed(1234)",
        "> ",
        "clean_slate()",
        "Error in clean_slate() : could not find function \"clean_slate\"\n",
        "> ",
        "filelib = \"~/Google Drive/GitHub/Source/R/High-Dim Cointegration\"",
        "> ",
        "set.seed(1234)",
        "> ",
        "filelib = \"~/Google Drive/GitHub/Source/R/High-Dim Cointegration\"",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "N = 5000           # number of observations",
        "> ",
        "p = 100           # matrix dimension  ",
        "> ",
        "r = 50            # desired rank",
        "> ",
        "mcmc_iter = 1000  # number of MCMC iterations",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Create random Gaussian matrix",
        "> ",
        "SVD = svd(matrix(rnorm(p^2), nr=p, nc=p))",
        "> ",
        "# Symmetric matrix (such that all eigenvalues are real...)",
        "> ",
        "B = (SVD$u[,1:r]%*%diag(SVD$d[1:r]))%*%t(SVD$u[,1:r])",
        "> ",
        "B = B/max(B)",
        "> ",
        "e = eigen(B)$value",
        "> ",
        "",
        "> ",
        "# Sample a multi-dim process starting at 0.",
        "> ",
        "",
        "> ",
        "X  = matrix(0,nr=p,nc=N)",
        "> ",
        "mu = rep(0,p)",
        "> ",
        "a  = 1e-5",
        "> ",
        "dt = 1",
        "> ",
        "for(i in 2:N){",
        "+ ",
        "  dW   = dt*rnorm(p)",
        "+ ",
        "  dX   = (a*B%*%X[,i-1]-mu)*dt+dW",
        "+ ",
        "  X[,i] = X[,i-1]+dX",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "plot(0,0, type='n', xlim=c(1,N), ylim=range(X), bty='n')",
        "> ",
        "for(i in 1:p){",
        "+ ",
        "  lines(X[i,], col=add.alpha('dodgerblue',.8))",
        "+ ",
        "}",
        "Error in add.alpha(\"dodgerblue\", 0.8) : \n  could not find function \"add.alpha\"\n",
        "> ",
        "",
        "> ",
        "lam = Seigen(X)",
        "> ",
        "",
        "> ",
        "lam2 = S_eigen(X)",
        "Error in .Call(\"HiDimCI_S_eigen\", PACKAGE = \"HiDimCI\", X) : \n  \"HiDimCI_S_eigen\" not available for .Call() for package \"HiDimCI\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "> ",
        "lam2 = S_eigen(X)",
        "Error in .Call(\"HiDimCI_S_eigen\", PACKAGE = \"HiDimCI\", X) : \n  \"HiDimCI_S_eigen\" not available for .Call() for package \"HiDimCI\"\n",
        "> ",
        "lam2 = S_eigen(X)",
        "Error in .Call(\"HiDimCI_S_eigen\", PACKAGE = \"HiDimCI\", X) : \n  \"HiDimCI_S_eigen\" not available for .Call() for package \"HiDimCI\"\n",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "> ",
        "set.seed(1234)",
        "> ",
        "filelib = \"~/Google Drive/GitHub/Source/R/High-Dim Cointegration\"",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "N = 5000           # number of observations",
        "> ",
        "p = 100           # matrix dimension  ",
        "> ",
        "r = 50            # desired rank",
        "> ",
        "mcmc_iter = 1000  # number of MCMC iterations",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "# Create random Gaussian matrix",
        "> ",
        "SVD = svd(matrix(rnorm(p^2), nr=p, nc=p))",
        "> ",
        "# Symmetric matrix (such that all eigenvalues are real...)",
        "> ",
        "B = (SVD$u[,1:r]%*%diag(SVD$d[1:r]))%*%t(SVD$u[,1:r])",
        "> ",
        "B = B/max(B)",
        "> ",
        "e = eigen(B)$value",
        "> ",
        "",
        "> ",
        "# Sample a multi-dim process starting at 0.",
        "> ",
        "",
        "> ",
        "X  = matrix(0,nr=p,nc=N)",
        "> ",
        "mu = rep(0,p)",
        "> ",
        "a  = 1e-5",
        "> ",
        "dt = 1",
        "> ",
        "for(i in 2:N){",
        "+ ",
        "  dW   = dt*rnorm(p)",
        "+ ",
        "  dX   = (a*B%*%X[,i-1]-mu)*dt+dW",
        "+ ",
        "  X[,i] = X[,i-1]+dX",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "plot(0,0, type='n', xlim=c(1,N), ylim=range(X), bty='n')",
        "> ",
        "for(i in 1:p){",
        "+ ",
        "  lines(X[i,], col=add.alpha('dodgerblue',.8))",
        "+ ",
        "}",
        "Error in add.alpha(\"dodgerblue\", 0.8) : \n  could not find function \"add.alpha\"\n",
        "> ",
        "",
        "> ",
        "lam = Seigen(X)",
        "> ",
        "",
        "> ",
        "lam2 = S_eigen(X)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "# Simulate once from the described distibution.",
        "> ",
        "simDist <- function(pi.true=0.2, n.row =c(6,8,5)){  ",
        "+ ",
        "   ",
        "+ ",
        "  # Simulate from 3 binomials, with various # of trials (but equal pi par.)",
        "+ ",
        "    sucs=numeric(0)",
        "+ ",
        "    for(i in 1:length(n.row)) {",
        "+ ",
        "      sucs[i] = rbinom(n = 1, size = n.row[i], prob = pi.true)",
        "+ ",
        "    }",
        "+ ",
        "    fails = n.row-sucs",
        "+ ",
        "  ",
        "+ ",
        "  # Set observations in a matrix format",
        "+ ",
        "    n.obs = cbind(sucs,fails)+0.5 # use correction for zero counts (important when calculating X^2 and G^2!)",
        "+ ",
        "  ",
        "+ ",
        "  # Calculate rowsums, colsums, total obs, marginal est. pi's and expected frequencies ",
        "+ ",
        "    n.row = rowSums(n.obs)",
        "+ ",
        "    n.col = colSums(n.obs)",
        "+ ",
        "    n.tot = sum(n.row)",
        "+ ",
        "    pi.row = n.row/n.tot",
        "+ ",
        "    pi.col = n.col/n.tot",
        "+ ",
        "    mu.hat = n.tot*outer(pi.row,pi.col)",
        "+ ",
        "  ",
        "+ ",
        "  # Calculate Pearson statistic",
        "+ ",
        "    # Defining 0/0 = 0 (this is just for show, it's not needed when we use the correction)",
        "+ ",
        "    X2 = sum(ifelse(mu.hat > 0, (n.obs - mu.hat)^2/mu.hat, 0))",
        "+ ",
        "  # Calculate LR statistic",
        "+ ",
        "    # Defining 0log0 = 0 and 0log(0/0) = 0 (latter happens when mu_ij = n_ij = 0), just for show, as above.",
        "+ ",
        "    G2 = 2*sum(ifelse(mu.hat > 0,n.obs * log(n.obs/mu.hat),0)) ",
        "+ ",
        "  # Return both statistics",
        "+ ",
        "    return(c(X2,G2))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "plotIt <- function(nSim = 10000, pi=0.2, ns=c(6,8,5)){",
        "+ ",
        "  ",
        "+ ",
        "  # Simulate experiments (outcome is X^2 and G^2 in each) ",
        "+ ",
        "    x = matrix(0,nSim,2)",
        "+ ",
        "    for(i in 1:nSim) x[i,] = simDist(pi,ns)",
        "+ ",
        "  ",
        "+ ",
        "  # Set plot window",
        "+ ",
        "    par(mfrow=c(2,2), oma=c(0,0,0,0)+0.2, mar=c(2.5,4,1,1))",
        "+ ",
        "  ",
        "+ ",
        "  # Plot histograms of X^2 along with chi^2 dist and 95% critical value",
        "+ ",
        "    y = x[,1]",
        "+ ",
        "    n.y = length(y)",
        "+ ",
        "    hist(y, freq=F, xlim=c(0,10), ylim=c(0,0.5), breaks=seq(0,100,0.5), main=expression(paste(\"Pearsons \", X^2)), xlab=\"\", ylab=\"Probability\")",
        "+ ",
        "    # The line below adds a kernel estimate of the density. Think of this as a \"continuous\" histogram.",
        "+ ",
        "    lines(density(y[!is.na(y)], bw = 0.5, adjust = 1,kernel = \"epanechnikov\",n = 512, na.rm = FALSE), main=\"Estimated kernel\", ylim=c(0,0.5), col='blue', lwd=1.5)",
        "+ ",
        "    lines(seq(0,100,0.1), dchisq(df = 2,x = seq(0,100,0.1)), col='red')",
        "+ ",
        "    abline(v=qchisq(0.95,2), lty=2)",
        "+ ",
        "    legend(\"topright\",c(\"true\",\"kernel\",\"critical value\"), col=c(\"red\",\"blue\",\"black\"),lty=c(1,1,2), bty=\"n\", cex=0.75, x.intersp = 0.2, seg.len = 1.05)",
        "+ ",
        "  ",
        "+ ",
        "    # Add quantile plot",
        "+ ",
        "    qqplot(qchisq(ppoints(n.y), df = 2), y, main = expression(\"Q-Q plot for\" ~~ {chi^2}[nu == 2]), pch=20, xlim=c(0,20), ylim=c(0,20), ylab=\"Empirical\")",
        "+ ",
        "    abline(a=0,b=1, lty=1, col='red')",
        "+ ",
        "    abline(v=qchisq(0.95,2), lty=2)",
        "+ ",
        "    abline(h=qchisq(0.95,2), lty=2)",
        "+ ",
        "    ",
        "+ ",
        "  ",
        "+ ",
        "  # Plot histograms of G^2 along with chi^2 dist and 95% critical value",
        "+ ",
        "    y = x[,2]",
        "+ ",
        "    y = y[!is.na(y)]",
        "+ ",
        "    n.y = length(y)",
        "+ ",
        "    hist(y, freq=F, xlim=c(0,10), ylim=c(0,0.5), breaks=seq(0,100,0.5), main=expression(paste(\"LR test \", G^2)), xlab=\"\", ylab=\"Probability\")",
        "+ ",
        "    # The line below adds a kernel estimate of the density. Think of this as a \"continuous\" histogram.",
        "+ ",
        "    lines(density(y[!is.na(y)], bw = 0.5, adjust = 1,kernel = \"epanechnikov\",n = 512, na.rm = FALSE), main=\"Estimated kernel\", ylim=c(0,0.5), col='blue', lwd=1.5)",
        "+ ",
        "    lines(seq(0,100,0.1), dchisq(df = 2,x = seq(0,100,0.1)), col='red')",
        "+ ",
        "    abline(v=qchisq(0.95,2), lty=2)",
        "+ ",
        "    legend(\"topright\",c(\"true\",\"kernel\",\"critical value\"), col=c(\"red\",\"blue\",\"black\"),lty=c(1,1,2), bty=\"n\", cex=0.75, x.intersp = 0.2, seg.len = 1.05)",
        "+ ",
        "    ",
        "+ ",
        "    # Add quantile plot",
        "+ ",
        "    qqplot(qchisq(ppoints(n.y), df = 2), y, main = expression(\"Q-Q plot for\" ~~ {chi^2}[nu == 2]), pch=20, xlim=c(0,20), ylim=c(0,20), ylab=\"Empirical\")",
        "+ ",
        "    abline(a=0,b=1, lty=1, col='red')",
        "+ ",
        "    abline(v=qchisq(0.95,2), lty=2)",
        "+ ",
        "    abline(h=qchisq(0.95,2), lty=2)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "",
        "> ",
        "plotIt(1000, 0.5, 1*c(6,8,5))",
        "> ",
        "set.seed(1234)",
        "> ",
        "",
        "> ",
        "N = 1000",
        "> ",
        "n.row =c(6,8,5)*100",
        "> ",
        "pi.true=0.2",
        "> ",
        "obs = array(NA,dim=c(4,3,N), dimnames = list(row=c(1,2,3,\"tot\"),obs=c(\"yes\",\"no\",\"tot\"),sim=1:N))",
        "> ",
        "for(i in 1:length(n.row)) {",
        "+ ",
        "  obs[i,1,] = rbinom(n = N, size = n.row[i], prob = pi.true)",
        "+ ",
        "}",
        "> ",
        "obs[1:3,2,] = n.row-obs[1:3,1,]",
        "> ",
        "obs = obs+0.5",
        "> ",
        "n.tot = sum(obs[1:3,1:2,1])",
        "> ",
        "for(i in 1:3){",
        "+ ",
        "  obs[i,3,] = apply(obs[i,1:2,],2,sum)",
        "+ ",
        "  obs[4,i,] = apply(obs[1:3,i,],2,sum)  ",
        "+ ",
        "}",
        "> ",
        "pi.row = (obs/n.tot)[1:3,3,]",
        "> ",
        "pi.col = (obs/n.tot)[4,1:2,]",
        "> ",
        "",
        "> ",
        "mu.est = obs",
        "> ",
        "for(i in 1:N){",
        "+ ",
        "  mu.est[1:3,1:2,i] = n.tot*tcrossprod(pi.row[,i],pi.col[,i])  ",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "X2 = apply((obs-mu.est)^2/mu.est,3,sum)",
        "> ",
        "G2 = apply(obs*log(obs/mu.est),3,sum)",
        "> ",
        "",
        "> ",
        "X2.dens = density(X2, bw = 0.5, adjust = 1,kernel = \"epanechnikov\",n = 512, na.rm = FALSE)",
        "> ",
        "G2.dens = density(G2, bw = 0.5, adjust = 1,kernel = \"epanechnikov\",n = 512, na.rm = FALSE)",
        "> ",
        "",
        "> ",
        "plot(dchisq(0:15,2), type='l', ylab=\"density\",xlab=\"\", lty=3,lwd=2)",
        "> ",
        "lines(X2.dens, col='red', lwd=2)",
        "> ",
        "lines(G2.dens, col='blue', lwd=2)",
        "> ",
        "legend(\"top\",c(expression(paste(\"True \",chi^2)),expression(X^2),expression(G^2)),lwd=c(2,2,2),lty=c(1,1,1),col=c(\"black\",\"red\",\"blue\"), bty='n')",
        "> ",
        "set.seed(1234)",
        "> ",
        "N = 1000",
        "> ",
        "n.row =c(6,8,5)*100",
        "> ",
        "pi.true=0.2",
        "> ",
        "obs = array(NA,dim=c(4,3,N), dimnames = list(row=c(1,2,3,\"tot\"),obs=c(\"yes\",\"no\",\"tot\"),sim=1:N))",
        "> ",
        "for(i in 1:length(n.row)) {",
        "+ ",
        "  obs[i,1,] = rbinom(n = N, size = n.row[i], prob = pi.true)",
        "+ ",
        "}",
        "> ",
        "obs[1:3,2,] = n.row-obs[1:3,1,]",
        "> ",
        "obs = obs+0.5",
        "> ",
        "n.tot = sum(obs[1:3,1:2,1])",
        "> ",
        "for(i in 1:3){",
        "+ ",
        "  obs[i,3,] = apply(obs[i,1:2,],2,sum)",
        "+ ",
        "  obs[4,i,] = apply(obs[1:3,i,],2,sum)  ",
        "+ ",
        "}",
        "> ",
        "pi.row = (obs/n.tot)[1:3,3,]",
        "> ",
        "pi.col = (obs/n.tot)[4,1:2,]",
        "> ",
        "mu.est = obs",
        "> ",
        "for(i in 1:N){",
        "+ ",
        "  mu.est[1:3,1:2,i] = n.tot*tcrossprod(pi.row[,i],pi.col[,i])  ",
        "+ ",
        "  ",
        "+ ",
        "}",
        "> ",
        "X2 = apply((obs-mu.est)^2/mu.est,3,sum)",
        "> ",
        "G2 = apply(obs*log(obs/mu.est),3,sum)",
        "> ",
        "X2.dens = density(X2, bw = 0.5, adjust = 1,kernel = \"epanechnikov\",n = 512, na.rm = FALSE)",
        "> ",
        "G2.dens = density(G2, bw = 0.5, adjust = 1,kernel = \"epanechnikov\",n = 512, na.rm = FALSE)",
        "> ",
        "plot(dchisq(0:15,2), type='l', ylab=\"density\",xlab=\"\", lty=3,lwd=2)",
        "> ",
        "lines(X2.dens, col='red', lwd=2)",
        "> ",
        "lines(G2.dens, col='blue', lwd=2)",
        "> ",
        "legend(\"top\",c(expression(paste(\"True \",chi^2)),expression(X^2),expression(G^2)),lwd=c(2,2,2),lty=c(1,1,1),col=c(\"black\",\"red\",\"blue\"), bty='n')",
        "> ",
        "plot(dchisq(0:15,2), type='l', ylab=\"density\",xlab=\"\", lty=3,lwd=2, bty='n')",
        "> ",
        "lines(X2.dens, col='red', lwd=2)",
        "> ",
        "lines(G2.dens, col='blue', lwd=2)",
        "> ",
        "legend(\"top\",c(expression(paste(\"True \",chi^2)),expression(X^2),expression(G^2)),lwd=c(2,2,2),lty=c(1,1,1),col=c(\"black\",\"red\",\"blue\"), bty='n')",
        "> ",
        "layout(1)",
        "> ",
        "plot(dchisq(0:15,2), type='l', ylab=\"density\",xlab=\"\", lty=3,lwd=2, bty='n')",
        "> ",
        "lines(X2.dens, col='red', lwd=2)",
        "> ",
        "lines(G2.dens, col='blue', lwd=2)",
        "> ",
        "legend(\"top\",c(expression(paste(\"True \",chi^2)),expression(X^2),expression(G^2)),lwd=c(2,2,2),lty=c(1,1,1),col=c(\"black\",\"red\",\"blue\"), bty='n')",
        "> ",
        "pi.est <-function(or,p1x,px1){",
        "+ ",
        "  if(or != 1){",
        "+ ",
        "    tmp = sqrt((1+(p1x+px1)*(or-1))^2+4*or*(1-or)*p1x*px1)",
        "+ ",
        "    p11 = (1+(p1x+px1)*(or-1)-tmp)/(2*(or-1))",
        "+ ",
        "  } else{",
        "+ ",
        "    p11 = p1x*px1",
        "+ ",
        "  }",
        "+ ",
        "  ",
        "+ ",
        "  p12 = p1x-p11",
        "+ ",
        "  p21 = px1-p11",
        "+ ",
        "  p22 = 1-p11-p12-p21  ",
        "+ ",
        "  return(matrix(c(p11,p21,p12,p22),nr=2,nc=2))",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "or.fun <- function(or){",
        "+ ",
        "  k = length(or)",
        "+ ",
        "  out = numeric(k)",
        "+ ",
        "  for(i in 1:k){",
        "+ ",
        "    obs = matrix(c(60,2,44,61),nr=2,nc=2)",
        "+ ",
        "    q = qchisq(0.95,1)",
        "+ ",
        "    n = sum(obs)",
        "+ ",
        "    p1x = sum(obs[1,])/n",
        "+ ",
        "    px1 = sum(obs[,1])/n",
        "+ ",
        "    est = pi.est(or[i],p1x,px1)*n ",
        "+ ",
        "    out[i] = sum((obs-est)^2/est)-q",
        "+ ",
        "  }",
        "+ ",
        "  return(out)",
        "+ ",
        "}",
        "> ",
        "",
        "> ",
        "x = seq(0.000,200,0.1)",
        "> ",
        "layout(1)",
        "> ",
        "plot(x,or.fun(x),type='l', ylim=c(-10,10))",
        "> ",
        "abline(h=0, lty=3, col='red')",
        "> ",
        "",
        "> ",
        "library(rootSolve)",
        "> ",
        "sort(uniroot.all (or.fun,interval = c(0.001,200)))",
        "[1]  10.59971 161.53242\n",
        "> ",
        "",
        "> ",
        "library(PropCIs)",
        "> ",
        "orscoreci(60,104,2,63,0.95)",
        "\n\n\ndata:  \n\n95 percent confidence interval:\n  10.55088 162.15606\n\n\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(HiDimCI)",
        "\nRestarting R session...\n\n"
    ],
    "type" : [
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        3,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        3,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2
    ]
}
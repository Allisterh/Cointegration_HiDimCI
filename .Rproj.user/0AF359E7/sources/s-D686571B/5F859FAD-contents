library(HiDimCI)
library(misc)
library(Matrix)
library(doParallel)
filelib = icloud_lib("GitHub/Source/R/packages/HiDimCI/")
clean_up(filelib)
set.seed(1234)

make_angles <- function(X, P, verbose=FALSE){
  p    = nrow(X)
  out  = numeric(p)
  for(i in 1:p){
    if(verbose){
      cat("\rr=",i, sep="")
    }
    M      = HiDimCI::johansen(X,i)
    Phat   = M$alpha%*%t(M$beta)
    out[i] = acos(HiDimCI::matrix_angle(Phat,P))
  }
  return(out)
}


make_batch(100,8)







p   = 100
d   = 8
sig = 1
Ns  = c(500,1000,2000)
Ss  = c(.5,1,2)
for(i in 1:3){
  for(j in 1:3){
    nrep = 100
    b    = make_batch(nrep,ncores=8)
    N    = Ns[i]
    p    = 100
    d    = 8
    sig  = Ss[k]
    f <- function(N,p,d,sig){
      B    = as.matrix(HiDimCI::Kuramoto.matrix(p,d))
      X    = HiDimCI::sampleX(B,N,sig)
      Pols = S_moments(X)$OLS
      res  = make_angles(X, Pols, FALSE)
      return(res)  
    }
    
    # Parallel part:
    cl= makeCluster(length(b), setup_timeout=.5)
    parallel::clusterExport(cl, c("f","N","p","d","sig","S_moments", "make_angles"))
    tmp = parallel::parLapply(cl, b, function(i){
      out = replicate(i, f(N,p,d, sig))
      return(out)
    })
    stopCluster(cl)
    
    Mtmp = numeric(0)
    for(i in 1:length(tmp)){
      Mtmp = cbind(Mtmp,tmp[[i]])
    }
    Mtmp = rbind(pi/2,Mtmp)
    
    filename  = paste0(filelib,"data/angles2_N",N,"_p",p,"_d",d,"_sig",sig,".Rda")
    filename = sub("\\.","",filename)
    save(M_angles, file=filename)
  }
}



cols = c('orange', 'blue', 'red')

plot(0,0, type='n', xlim=c(0,100), ylim=c(0,pi/2))
for(i in 1:3){
  for(j in 1:3){
    cat("\n")
    lines(1:p,f(Ns[i],p,d,Ss[j]), lty=j, col=cols[i])    
  }
}